generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  carts     Cart[] // Relation to Cart
  orders    Order[] // Relation to Order
}

model Recipe {
  id           Int      @id @default(autoincrement())
  title        String   @unique
  description  String?
  ingredients  String
  instructions String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@map("categories") // Map to "categories" table
}

model Product {
  id         Int         @id @default(autoincrement())
  name       String
  price      Float
  categoryId Int
  category   Category    @relation(fields: [categoryId], references: [id])
  carts      Cart[] // Relation to Cart
  orderItems OrderItem[] // Relation to OrderItem
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())

  @@map("products") // Map to "products" table
}

model Cart {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("carts")
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  orderItems  OrderItem[]   
  status      OrderStatus @default(PENDING)
  totalAmount Float
  payment     Payment?  // Define the inverse relation to Payment
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Payment {
  id          Int       @id @default(autoincrement())
  orderId     Int       @unique 
  amount      Float
  currency    String   
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

// Define relationships if needed
  order       Order     @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

